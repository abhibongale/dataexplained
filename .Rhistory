home_owner %>%
mutate(race = factor(race)) %>%
#Make plot
ggplot(aes(year, home_owner_pct)) +
geom_line(aes(colour = race), size = 1) +
geom_point(aes(colour = race)) +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
scale_y_continuous(labels = scales::percent_format()) +
scale_colour_manual(values = c("#FAAB18", "#1380A1", "#990000")) +
asthetatic_look()
# Chunk 6
income_aggregate %>%
ggplot(aes(year, income_share)) +
geom_line(aes(colour = income_quintile)) +
facet_wrap(~race, scales = "free") +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
asthetatic_look()
#scale_fill_discrete(breaks=c("Top 5%","Highest","Fourth", "Third", "Second", "Lowest"))
# Chunk 7
income_distribution %>%
filter(race == "Black Alone" | race == "White Alone") %>%
ggplot(aes(year, income_median)) +
geom_col(aes(fill = race), position = "dodge") +
scale_fill_manual(values = c("#FAAB18", "#1380A1")) +
scale_y_continuous(labels = scales::dollar_format()) +
asthetatic_look()
# Chunk 8
lifetime_earn %>%
ggplot(aes(gender, lifetime_earn)) +
geom_col(aes(fill = race), position = "dodge") +
scale_fill_manual(values = c("#FAAB18", "#1380A1", "#990000")) +
scale_y_continuous(labels = scales::dollar_format()) +
asthetatic_look()
# Chunk 9
#Prepare data
student_debt %>%
#Make plot
ggplot(aes(year, loan_debt_pct)) +
geom_line(aes(colour = race), size = 1) +
geom_point(aes(colour = race)) +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
scale_y_continuous(labels = scales::percent_format(scale = 100)) +
scale_colour_manual(values = c("#FAAB18", "#1380A1", "#990000")) +
labs(subtitle = "Student Dept 1976-2016*, %") +
asthetatic_look()
# Chunk 10
#Prepare data
retirement %>%
#Make plot
ggplot(aes(year, retirement)) +
geom_line(aes(colour = race), size = 1) +
geom_point(aes(colour = race)) +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
scale_y_continuous(labels = scales::dollar_format()) +
scale_colour_manual(values = c("#FAAB18", "#1380A1", "#990000")) +
labs(subtitle = "Retirement") +
asthetatic_look()
# Chunk 11
race_wealth %>%
filter(!is.na(wealth_family), race != "Non-White", type == "Median") %>%
ggplot(aes(year, wealth_family)) +
geom_line(aes(colour = race), size = 0.8) +
geom_point(aes(colour = race)) +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
scale_colour_manual(values = c("#FAAB18", "#1380A1", "#990000")) +
asthetatic_look()
# Chunk 12
student_debt %>%
ggplot(aes(year, loan_debt_pct)) +
geom_line(aes(colour = race)) +
geom_point(aes(colour = race)) +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
scale_y_continuous(labels = scales::percent_format()) +
scale_colour_manual(values = c("#FAAB18", "#1380A1", "#990000")) +
asthetatic_look()
# Chunk 13
retirement %>%
ggplot(aes(year, retirement)) +
geom_line(aes(colour = race)) +
geom_point(aes(colour = race)) +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
scale_y_continuous(labels = scales::dollar_format()) +
scale_colour_manual(values = c("#FAAB18", "#1380A1", "#990000")) +
asthetatic_look()
#!/usr/bin/Rscript --vanilla
# compiles all .Rmd files in _R directory into .md files in Pages directory,
# if the input file is older than the output file.
# run ./knitpages.R to update all knitr files that need to be updated.
KnitPost <- function(input, outfile, figsfolder, cachefolder, base.url="/") {
# this function is a modified version of an example here:
# http://jfisher-usgs.github.com/r/2012/07/03/knitr-jekyll/
require(knitr);
opts_knit$set(base.url = base.url)
fig.path <- paste0(figsfolder, sub(".Rmd$", "", basename(input)), "/")
cache.path <- file.path(cachefolder, sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(cache.path = cache.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, outfile, envir = parent.frame())
}
knit_folder <- function(infolder, outfolder, figsfolder, cachefolder) {
for (infile in list.files(infolder, pattern = "*.Rmd", full.names = TRUE)) {
pattern = "\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\\-"
print(infile)
# folder = ifelse(grepl(pattern, infile), outfolder, "pages")
outfile = paste0(outfolder, "/", sub(".Rmd$", ".md", basename(infile)))
print(outfile)
# knit only if the input file is the last one modified
if (!file.exists(outfile) |
file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(infile, outfile, figsfolder, cachefolder)
}
}
}
knit_folder("_R", "_posts", "figs/", "_caches/")
#knit_folder("_R/drafts", "_drafts", "figs/drafts/")
knit_folder("../_R", "../_posts", "../figs/", "../_caches/")
install.packages("tidymodels")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE)
# Chunk 2
library(tidyverse) # metadata of packages
theme_set(theme_light())
# Chunk 3
georgia_pop <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/georgia_pop.csv')
census <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/census.csv')
furniture <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/furniture.csv')
city_rural <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/city_rural.csv')
income <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/income.csv')
freed_slaves <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/freed_slaves.csv')
occupation <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/occupation.csv')
conjugal <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/conjugal.csv')
View(census)
georgia_pop <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/georgia_pop.csv')
census <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/census.csv')
furniture <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/furniture.csv')
city_rural <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/city_rural.csv')
income <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/income.csv')
freed_slaves <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/freed_slaves.csv')
occupation <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/occupation.csv')
conjugal <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-16/conjugal.csv')
# read dataset
employed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-23/employed.csv')
employed %>%
view()
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE)
# packages
library(tidyverse)
# theme
theme_set(theme_light())
view(employed)
employed_tidy <- employed %>%
filter(!is.na(employ_n)) %>%
group_by(occupation = paste(industry, minor_occupation),
race_gender) %>%
summarise(n = mean(employ_n)) %>%
ungroup()
employed_tidy %>%
filter(race_gender %in% c("Women", "Black or African American", "Asian")) %>%
pivot_wider(names_from = race_gender, values_from = n, values_fill = 0)
install.packages("janitor")
employed_tidy %>%
filter(race_gender %in% c("Women", "Black or African American", "Asian")) %>%
pivot_wider(names_from = race_gender, values_from = n, values_fill = 0) %>%
janitor::clean_names()
employed_tidy %>%
filter(race_gender %in% c("Women", "Black or African American", "Asian")) %>%
pivot_wider(names_from = race_gender, values_from = n, values_fill = 0) %>%
janitor::clean_names() %>%
left_join(employed_tidy %>%
filter(race_gender == "TOTAL") %>%
select(-race_gender) %>%
rename(total = n))
employed_tidy <- employed %>%
filter(!is.na(employ_n)) %>%
group_by(occupation = paste(industry, minor_occupation),
race_gender) %>%
summarise(n = mean(employ_n)) %>%
ungroup()
# read dataset
employed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-23/employed.csv')
employed_tidy <- employed %>%
filter(!is.na(employ_n)) %>%
group_by(occupation = paste(industry, minor_occupation),
race_gender) %>%
summarise(n = mean(employ_n)) %>%
ungroup()
view(employed_tidy)
employed_tidy %>%
filter(race_gender %in% c("Women", "Black or African American", "Asian")) %>%
pivot_wider(names_from = race_gender, values_from = n, values_fill = 0) %>%
janitor::clean_names() %>%
left_join(employed_tidy %>%
filter(race_gender == "TOTAL") %>%
select(-race_gender) %>%
rename(total = n))
?across
employed_tidy %>%
filter(race_gender %in% c("Women", "Black or African American", "Asian")) %>%
pivot_wider(names_from = race_gender, values_from = n, values_fill = 0) %>%
janitor::clean_names() %>%
left_join(employed_tidy %>%
filter(race_gender == "TOTAL") %>%
select(-race_gender) %>%
rename(total = n)) %>%
# Across Apply a function (or functions) across multiple columns, function  variables (.) divided by total
mutate(across(c(asian, black_or_african_american, women), ~ .  / total))
summary(employed_tidy)
summary(employed_tidy$n)
?scale
employed_tidy %>%
filter(race_gender %in% c("Women", "Black or African American", "Asian")) %>%
pivot_wider(names_from = race_gender, values_from = n, values_fill = 0) %>%
janitor::clean_names() %>%
left_join(employed_tidy %>%
filter(race_gender == "TOTAL") %>%
select(-race_gender) %>%
rename(total = n)) %>%
# Across Apply a function (or functions) across multiple columns, function  variables (.) divided by total
# we have to take log because total is in millions and broad range and k-means are sensitive how numbers are scale
mutate(across(c(asian, black_or_african_american, women), ~ .  / total),
total = log(total),
across(is.numeric, ~as.numeric(scale(.)))
)
employed_tidy %>%
filter(race_gender %in% c("Women", "Black or African American", "Asian")) %>%
pivot_wider(names_from = race_gender, values_from = n, values_fill = 0) %>%
janitor::clean_names() %>%
left_join(employed_tidy %>%
filter(race_gender == "TOTAL") %>%
select(-race_gender) %>%
rename(total = n)) %>%
filter(total > 1e4) %>%
# Across Apply a function (or functions) across multiple columns, function  variables (.) divided by total
# we have to take log because total is in millions and broad range and k-means are sensitive how numbers are scale
mutate(across(c(asian, black_or_african_american, women), ~ .  / total),
total = log(total),
across(is.numeric, ~as.numeric(scale(.)))
)
install.packages("snakecase")
employment_demo <- employed_tidy %>%
filter(race_gender %in% c("Women", "Black or African American", "Asian")) %>%
pivot_wider(names_from = race_gender, values_from = n, values_fill = 0) %>%
janitor::clean_names() %>%
left_join(employed_tidy %>%
filter(race_gender == "TOTAL") %>%
select(-race_gender) %>%
rename(total = n)) %>%
# reduce the size of the dataset
filter(total > 1e4) %>%
# Across Apply a function (or functions) across multiple columns, function  variables (.) divided by total
# we have to take log because total is in millions and broad range and k-means are sensitive how numbers are scale. So we have to scale with scale function
mutate(across(c(asian, black_or_african_american, women), ~ .  / total),
total = log(total),
across(is.numeric, ~as.numeric(scale(.)))
) %>%
mutate(occupation = snakecase::to_snake_case(occupation))
employment_demo %>% arrange(women)
employment_demo %>% arrange(-women)
kmeans(select(employment, -occupation), centers = 3)
summary(employment_clust)
employment_demo <- kmeans(select(employment_demo, -occupation), centers = 3)
summary(employment_clust)
employment_clust <- kmeans(select(employment_demo, -occupation), centers = 3)
summary(employment_clust)
employment_clust <- kmeans(select(employment_demo, -occupation), centers = 3)
summary(employment_clust)
employment_clust <- kmeans(select(employment_demo, -occupation), centers = 3)
employment_clust <- kmeans(select(employment_demo, -occupation), centers = 3)
employment_demo <- employed_tidy %>%
filter(race_gender %in% c("Women", "Black or African American", "Asian")) %>%
pivot_wider(names_from = race_gender, values_from = n, values_fill = 0) %>%
janitor::clean_names() %>%
left_join(employed_tidy %>%
filter(race_gender == "TOTAL") %>%
select(-race_gender) %>%
rename(total = n)) %>%
# reduce the size of the dataset
filter(total > 1e4) %>%
# Across Apply a function (or functions) across multiple columns, function  variables (.) divided by total
# we have to take log because total is in millions and broad range and k-means are sensitive how numbers are scale. So we have to scale with scale function
mutate(across(c(asian, black_or_african_american, women), ~ .  / total),
total = log(total),
across(is.numeric, ~as.numeric(scale(.)))
) %>%
mutate(occupation = snakecase::to_snake_case(occupation))
employment_demo
employment_clust <- kmeans(select(employment_demo, -occupation), centers = 3)
summary(employment_clust)
install.packages("broom")
?broom
?tidy
library(broom)
broom::tidy(employment_clust)
?broom::tidy
augment(employment_clust, employment_demo) %>%
ggplot(aes(total, women, color = .cluster)) +
geom_point(alpha = 0.8)
broom::augment(employment_clust, employment_demo) %>%
ggplot(aes(total, women, color = .cluster)) +
geom_point(alpha = 0.8)
broom::augment(employment_clust, employment_demo) %>%
ggplot(aes(total, black_or_african_american), color = .cluster) +
geom_point(alpha = 0.8)
broom::augment(employment_clust, employment_demo) %>%
ggplot(aes(total, black_or_african_american, color = .cluster)) +
geom_point(alpha = 0.8)
kclusts <- tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~kmeans(select(employment_demo, ~occupation), .x)),
tidied = map(kclust, tidy),
glanced = map(clust)
)
kclusts <- tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~ kmeans(select(employment_demo, ~occupation), .x)),
tidied = map(kclust, tidy),
glanced = map(clust)
)
broom::augment(employment_clust, employment_demo) %>%
ggplot(aes(total, black_or_african_american, color = .cluster)) +
geom_point(alpha = 0.8)
kclusts <-
tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~ kmeans(select(employment_demo, ~occupation), .x)),
tidied = map(kclust, tidy),
glanced = map(clust)
)
library(broom)
kclusts <-
tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~ kmeans(select(employment_demo, ~occupation), .x)),
tidied = map(kclust, tidy),
glanced = map(clust)
)
kclusts <-
tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~ kmeans(select(employment_demo, ~occupation), .x)),
tidied = map(kclust, tidy),
glanced = map(kclust)
)
kclusts <-
tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~ kmeans(select(employment_demo, ~occupation), .x)),
tidied = map(kclust, tidy),
glanced = map(kclust)
)
kclusts <-
tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~ kmeans(select(employment_demo, ~occupation), .x)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, employment_demo)
)
kclusts %>%
unnest()
kclusts <-
tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~ kmeans(select(employment_demo, ~occupation), .x)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, employment_demo)
)
library(broom)
kclusts <-
tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~ kmeans(select(employment_demo, ~occupation), .x)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, employment_demo)
)
kclusts %>%
unnest(glanced) %>%
ggplot
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE)
# packages
library(tidyverse)
# theme
theme_set(theme_light())
# Chunk 2
employed <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-23/employed.csv')
# Chunk 3
employed_tidy <- employed %>%
filter(!is.na(employ_n)) %>%
group_by(occupation = paste(industry, minor_occupation),
race_gender) %>%
summarise(n = mean(employ_n)) %>%
ungroup()
# Chunk 4
employment_demo <- employed_tidy %>%
filter(race_gender %in% c("Women", "Black or African American", "Asian")) %>%
pivot_wider(names_from = race_gender, values_from = n, values_fill = 0) %>%
janitor::clean_names() %>%
left_join(employed_tidy %>%
filter(race_gender == "TOTAL") %>%
select(-race_gender) %>%
rename(total = n)) %>%
# reduce the size of the dataset
filter(total > 1e4) %>%
# Across Apply a function (or functions) across multiple columns, function  variables (.) divided by total
# we have to take log because total is in millions and broad range and k-means are sensitive how numbers are scale. So we have to scale with scale function
mutate(across(c(asian, black_or_african_american, women), ~ .  / total),
total = log(total),
across(is.numeric, ~as.numeric(scale(.)))
) %>%
mutate(occupation = snakecase::to_snake_case(occupation))
employment_demo
# Chunk 5
employment_clust <- kmeans(select(employment_demo, -occupation), centers = 3)
summary(employment_clust)
# Chunk 6
broom::tidy(employment_clust)
# Chunk 7
broom::augment(employment_clust, employment_demo) %>%
ggplot(aes(total, black_or_african_american, color = .cluster)) +
geom_point(alpha = 0.8)
# Chunk 8
library(broom)
kclusts <- tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~ kmeans(select(employment_demo, ~occupation), .x)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, employment_demo)
)
library(broom)
kclusts <- tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~kmeans(select(employment_demo, ~occupation), .x)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, employment_demo)
)
library(broom)
kclusts <- tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~kmeans(select(employment_demo, -occupation), .x)),
tidied = map(kclust, tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, employment_demo)
)
library(broom)
kclusts <- tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~kmeans(select(employment_demo, -occupation), .x)),
tidied = map(kclust, broom::tidy),
glanced = map(kclust, glance),
augmented = map(kclust, augment, employment_demo)
)
library(broom)
kclusts <- tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~kmeans(select(employment_demo, -occupation), .x)),
tidied = map(kclust, broom::tidy),
glanced = map(kclust, broom::glance),
augmented = map(kclust, augment, employment_demo)
)
library(broom)
kclusts <- tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~kmeans(select(employment_demo, -occupation), .x)),
tidied = map(kclust, broom::tidy),
glanced = map(kclust, broom::glance),
augmented = map(kclust, broom::augment, employment_demo)
)
kclusts %>%
unnest(glanced) %>%
ggplot(aes(k, broom::tot.withinss)) +
geom_line(alpha = 0.8) +
geom_point(size = 2)
library(broom)
kclusts <- tibble(k = 1:9) %>%
mutate(
kclust = map(k, ~kmeans(select(employment_demo, -occupation), .x)),
tidied = map(kclust, broom::tidy),
glanced = map(kclust, broom::glance),
augmented = map(kclust, broom::augment, employment_demo)
)
kclusts %>%
unnest(glanced) %>%
ggplot(aes(k, tot.withinss)) +
geom_line(alpha = 0.8) +
geom_point(size = 2)
install.packages("plotly")
library(plotly)
employment_clust <- kmeans(select(employment_demo, -occupation), centers = 5)
p <- augment(employment_clust, employment_demo) %>%
ggplot(aes(total, black_or_african_american, color = .cluster,
name = occupation)) +
geom_point(alpha = 0.8)
ggplotly(p)
p <- augment(employment_clust, employment_demo) %>%
ggplot(aes(total, black_or_african_american, color = .cluster,
name = occupation)) +
geom_point(alpha = 0.8)
library(plotly)
employment_clust <- kmeans(select(employment_demo, -occupation), centers = 5)
p <- broom::augment(employment_clust, employment_demo) %>%
ggplot(aes(total, black_or_african_american, color = .cluster,
name = occupation)) +
geom_point(alpha = 0.8)
ggplotly(p)
