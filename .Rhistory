chunk_output_type: console
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE)
# packages
library(tidyverse)
# theme
theme_set(theme_light())
```
![superbowl](https://projects.fivethirtyeight.com/super-bowl-ads/images/SUPER-BOWL-ADS-Topper.png)
```{r}
youtube <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-02/youtube.csv')
```
```{r}
# data wrangling
youtube <- youtube %>%
mutate(brand = fct_recode(brand, Hyundai = "Hynudai"))
```
```{r}
# aesthetic style
my_style <-function ()
{
font <- "Helvetica"
ggplot2::theme(plot.title = ggplot2::element_text(family = font, size = 14, face = "bold",
color = "#222222"),
plot.subtitle = ggplot2::element_text(family = font, size = 12,
margin = ggplot2::margin(9, 0, 9, 0)),
plot.caption = ggplot2::element_blank(),
legend.position = "top", legend.text.align = 0,
legend.background = ggplot2::element_blank(),
legend.title = ggplot2::element_blank(),
legend.key = ggplot2::element_blank(),
legend.text = ggplot2::element_text(family = font, size = 10, color = "#222222"),
axis.title = ggplot2::element_blank(),
axis.text = ggplot2::element_text(family = font, size = 10, color = "#222222"),
axis.text.x = ggplot2::element_text(margin = ggplot2::margin(5, b = 10)),
axis.ticks = ggplot2::element_blank(),
axis.line = ggplot2::element_blank()
#panel.grid.minor = ggplot2::element_blank(),
#panel.grid.major.y = ggplot2::element_line(color = "#cbcbcb"),
#panel.grid.major.x = ggplot2::element_blank(),
#panel.background = ggplot2::element_blank(),
#strip.background = ggplot2::element_rect(fill = "white"),
#strip.text = ggplot2::element_text(size = 14, hjust = 0)
)
}
```
## Which brand has the highest Superbowl ads?
```{r fig.width=6.72, fig.height=4.8, dpi=200, fig.fullwidth=TRUE}
youtube %>%
count(brand, sort = TRUE) %>%
head(20) %>%
mutate(brand = fct_reorder(brand, n)) %>%
ggplot(aes(brand, n)) +
geom_col(fill="#1380A1") +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
my_style()
```
## Superbowl ads by each brand (2000-2020)?
```{r fig.width=6.72, fig.height=4.8, dpi=200, fig.fullwidth=TRUE}
youtube %>%
ggplot(aes(year, fill = brand)) +
geom_bar() +
facet_wrap(~ brand) +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
theme(legend.position = "none") +
my_style()
```
## count metric per view count?
```{r fig.width=6.72, fig.height=4.8, dpi=200, fig.fullwidth=TRUE}
youtube %>%
pivot_longer(like_count:comment_count, names_to = "metric") %>%
ggplot(aes(value)) +
geom_histogram(binwidth = 0.5, fill = "1380A1") +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
scale_x_log10(labels = scales::comma) +
labs(x = "# of views") +
facet_wrap(~ metric) +
my_style()
```
## Funny and Non-Funny ads view Count of each Brand?
```{r fig.width=6.72, fig.height=4.8, dpi=200, fig.fullwidth=TRUE}
youtube %>%
filter(!is.na(view_count)) %>%
mutate(brand = fct_reorder(brand, view_count)) %>%
ggplot(aes(view_count, brand)) +
geom_boxplot(aes(fill = funny)) +
geom_vline(xintercept = 0, size = 2, colour = "#333333") +
scale_x_log10(labels = scales::comma) +
my_style()
```
## Median of View Count of the Superbowl ads?
```{r fig.width=6.72, fig.height=4.8, dpi=200, fig.fullwidth=TRUE}
youtube %>%
filter(!is.na(view_count)) %>%
group_by(year) %>%
summarise(n = n(),
median_views = median(view_count)) %>%
filter(n > 7) %>%
ggplot(aes(year, median_views)) +
geom_line(colour = "#1380A1") +
geom_point(aes(size = n), colour = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
scale_y_continuous(labels = scales::comma) +
theme(legend.position = "none") +
my_style()
```
## what is the correlation between types of ads and total view count?
```{r fig.width=6.72, fig.height=4.8, dpi=200, fig.fullwidth=TRUE}
youtube %>%
filter(!is.na(view_count)) %>%
pivot_longer(funny:use_sex, names_to = "category") %>%
group_by(category) %>%
summarise(correlation = cor(value, log(view_count + 1))) %>%
arrange(desc(correlation))
```
## View Count for each ads genre/category?
```{r fig.width=6.72, fig.height=4.8, dpi=200, fig.fullwidth=TRUE}
youtube %>%
filter(!is.na(view_count)) %>%
pivot_longer(funny:use_sex, names_to = "category") %>%
group_by(category, value) %>%
summarise(n = n(), median_view_count = median(view_count)) %>%
ggplot(aes(category, median_view_count, fill = value)) +
geom_col(position = "dodge") +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
scale_fill_manual(values = c("#FAAB18", "#1380A1")) +
my_style()
youtube %>%
filter(!is.na(view_count)) %>%
pivot_longer(funny:use_sex, names_to = "category") %>%
group_by(category) %>%
summarise(correlation = cor(value, log(view_count + 1))) %>%
arrange(desc(correlation))
lm(log2(view_count) ~ danger + patriotic + funny + show_product_quickly
+ celebrity + animals + use_sex, data = youtube) %>%
summary()
```
## Superbowl ads genre/category trend?
```{r fig.width=6.72, fig.height=4.8, dpi=200, fig.fullwidth=TRUE}
youtube %>%
pivot_longer(funny:use_sex, names_to = "category") %>%
group_by(category, year = 2 * (year %/% 2)) %>%
summarise(percent = mean(value),
n = n()) %>%
ggplot(aes(year, percent, color = category)) +
geom_line() +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
scale_y_continuous(labels = scales::percent) +
facet_wrap(~ category) +
theme(legend.position = "none") +
labs(x = "2-year period",
y = "% of ads with this quality") +
my_style()
```
## Modelling the genre/category
```{r}
glm(animals ~ year,
data = youtube,
family = "binomial") %>%
summary()
model <- youtube %>%
pivot_longer(funny:use_sex, names_to = "category") %>%
group_by(category) %>%
summarize(model = list(glm(value ~ year, family = "binomial"))) %>%
mutate(td = map(model, broom::tidy)) %>%
unnest(td) %>%
filter(term != "(Intercept)") %>%
arrange(desc(estimate))
```
```{r fig.width=6.83, fig.height=3.52, dpi=200, fig.fullwidth=TRUE}
youtube %>%
pivot_longer(funny:use_sex, names_to = "category") %>%
group_by(category,
year = 2 * (year %/% 2)) %>%
summarize(percnt = mean(value),
n = n()) %>%
inner_join(model, by = "category") %>%
mutate(category = str_to_title(str_replace_all(category, "_", " "))) %>%
filter(p.value <= .05) %>%
ggplot(aes(year, percnt, colour = category)) +
geom_line() +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
scale_y_continuous(labels = scales::percent) +
facet_wrap(~ category) +
theme(legend.position = "none") +
my_style() +
labs(x = "Time(rounded to 2-years)",
y = "% of ads with this quality")
```
## Brand's preferred genre/category?
```{r fig.width=6.72, fig.height=4.8, dpi=200, fig.fullwidth=TRUE}
library(tidytext)
youtube %>%
pivot_longer(funny:use_sex, names_to = "category") %>%
group_by(brand, category) %>%
mutate(category = str_to_title(str_replace_all(category, "_", " "))) %>%
summarise(percnt = mean(value)) %>%
ungroup() %>%
mutate(category = reorder_within(category, percnt, brand)) %>%
ggplot(aes(percnt, category)) +
geom_col(fill = "#1380A1") +
geom_vline(xintercept = 0, size = 1, colour = "#333333") +
scale_y_reordered() +
scale_x_continuous(labels = scales::percent) +
facet_wrap(~ brand, scales = "free_y") +
my_style()
```
```{r fig.width=6.72, fig.height=4.8, dpi=200, fig.fullwidth=TRUE}
youtube %>%
pivot_longer(funny:use_sex, names_to = "category") %>%
group_by(brand, category) %>%
mutate(category = str_to_title(str_replace_all(category, "_", " "))) %>%
summarise(percnt = mean(value)) %>%
ggplot(aes(category, brand, fill = percnt)) +
geom_tile() +
scale_fill_gradient2(low = "#FAAB18", high = "#990000", midpoint = 0.5) +
my_style()
```
```{r fig.width=6.72, fig.height=4.8, dpi=200, fig.fullwidth=TRUE}
youtube %>%
pivot_longer(funny:use_sex, names_to = "category") %>%
group_by(brand, category) %>%
mutate(category = str_to_title(str_replace_all(category, "_", " "))) %>%
summarise(percnt = mean(value)) %>%
reshape2::acast(brand ~ category, value.var = "percnt") %>%
heatmap()
```
## What is the like_dislike ratio with genre/category?
```{r fig.width=6.72, fig.height=4.8, dpi=200, fig.fullwidth=TRUE}
youtube %>%
pivot_longer(funny:use_sex, names_to = "category") %>%
mutate(like_ratio = like_count/(like_count + dislike_count)) %>%
filter(!is.na(like_ratio), !is.infinite(like_ratio)) %>%
group_by(brand, category, view_count) %>%
summarise(like_ratio) %>%
arrange(desc(like_ratio)) %>%
ggplot(aes(view_count, like_ratio)) +
geom_point(aes(colour = brand)) +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
geom_text(aes(label = category), check_overlap = TRUE, vjust = 1) +
scale_x_log10(labels = scales::comma) +
my_style()
```
#!/usr/bin/Rscript --vanilla
# compiles all .Rmd files in _R directory into .md files in Pages directory,
# if the input file is older than the output file.
# run ./knitpages.R to update all knitr files that need to be updated.
KnitPost <- function(input, outfile, figsfolder, cachefolder, base.url="/") {
# this function is a modified version of an example here:
# http://jfisher-usgs.github.com/r/2012/07/03/knitr-jekyll/
require(knitr);
opts_knit$set(base.url = base.url)
fig.path <- paste0(figsfolder, sub(".Rmd$", "", basename(input)), "/")
cache.path <- file.path(cachefolder, sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(cache.path = cache.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, outfile, envir = parent.frame())
}
knit_folder <- function(infolder, outfolder, figsfolder, cachefolder) {
for (infile in list.files(infolder, pattern = "*.Rmd", full.names = TRUE)) {
pattern = "\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\\-"
print(infile)
# folder = ifelse(grepl(pattern, infile), outfolder, "pages")
outfile = paste0(outfolder, "/", sub(".Rmd$", ".md", basename(infile)))
print(outfile)
# knit only if the input file is the last one modified
if (!file.exists(outfile) |
file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(infile, outfile, figsfolder, cachefolder)
}
}
}
knit_folder("_R", "_posts", "figs/", "_caches/")
#knit_folder("_R/drafts", "_drafts", "figs/drafts/")
knit_folder("../_R", "../_posts", "../figs/", "../_caches/")
youtube %>%
pivot_longer(funny:use_sex, names_to = "category") %>%
group_by(brand, category) %>%
mutate(category = str_to_title(str_replace_all(category, "_", " "))) %>%
summarise(percnt = mean(value)) %>%
ggplot(aes(category, brand, fill = percnt)) +
geom_tile() +
scale_fill_gradient2(low = "#FAAB18", high = "#990000", midpoint = 0.5) +
my_style()
youtube %>%
pivot_longer(funny:use_sex, names_to = "category") %>%
group_by(brand, category) %>%
mutate(category = str_to_title(str_replace_all(category, "_", " "))) %>%
summarise(percnt = mean(value)) %>%
reshape2::acast(brand ~ category, value.var = "percnt") %>%
heatmap()
youtube %>%
pivot_longer(funny:use_sex, names_to = "category") %>%
group_by(brand, category) %>%
mutate(category = str_to_title(str_replace_all(category, "_", " "))) %>%
summarise(percnt = mean(value)) %>%
ungroup() %>%
mutate(category = reorder_within(category, percnt, brand)) %>%
ggplot(aes(percnt, category)) +
geom_col(fill = "#1380A1") +
geom_vline(xintercept = 0, size = 1, colour = "#333333") +
scale_y_reordered() +
scale_x_continuous(labels = scales::percent) +
facet_wrap(~ brand, scales = "free_y") +
my_style()
#!/usr/bin/Rscript --vanilla
# compiles all .Rmd files in _R directory into .md files in Pages directory,
# if the input file is older than the output file.
# run ./knitpages.R to update all knitr files that need to be updated.
KnitPost <- function(input, outfile, figsfolder, cachefolder, base.url="/") {
# this function is a modified version of an example here:
# http://jfisher-usgs.github.com/r/2012/07/03/knitr-jekyll/
require(knitr);
opts_knit$set(base.url = base.url)
fig.path <- paste0(figsfolder, sub(".Rmd$", "", basename(input)), "/")
cache.path <- file.path(cachefolder, sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(cache.path = cache.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, outfile, envir = parent.frame())
}
knit_folder <- function(infolder, outfolder, figsfolder, cachefolder) {
for (infile in list.files(infolder, pattern = "*.Rmd", full.names = TRUE)) {
pattern = "\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\\-"
print(infile)
# folder = ifelse(grepl(pattern, infile), outfolder, "pages")
outfile = paste0(outfolder, "/", sub(".Rmd$", ".md", basename(infile)))
print(outfile)
# knit only if the input file is the last one modified
if (!file.exists(outfile) |
file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(infile, outfile, figsfolder, cachefolder)
}
}
}
knit_folder("_R", "_posts", "figs/", "_caches/")
#knit_folder("_R/drafts", "_drafts", "figs/drafts/")
knit_folder("../_R", "../_posts", "../figs/", "../_caches/")
View(knit_folder)
#!/usr/bin/Rscript --vanilla
# compiles all .Rmd files in _R directory into .md files in Pages directory,
# if the input file is older than the output file.
# run ./knitpages.R to update all knitr files that need to be updated.
KnitPost <- function(input, outfile, figsfolder, cachefolder, base.url="/") {
# this function is a modified version of an example here:
# http://jfisher-usgs.github.com/r/2012/07/03/knitr-jekyll/
require(knitr);
opts_knit$set(base.url = base.url)
fig.path <- paste0(figsfolder, sub(".Rmd$", "", basename(input)), "/")
cache.path <- file.path(cachefolder, sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(cache.path = cache.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, outfile, envir = parent.frame())
}
knit_folder <- function(infolder, outfolder, figsfolder, cachefolder) {
for (infile in list.files(infolder, pattern = "*.Rmd", full.names = TRUE)) {
pattern = "\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\\-"
print(infile)
# folder = ifelse(grepl(pattern, infile), outfolder, "pages")
outfile = paste0(outfolder, "/", sub(".Rmd$", ".md", basename(infile)))
print(outfile)
# knit only if the input file is the last one modified
if (!file.exists(outfile) |
file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(infile, outfile, figsfolder, cachefolder)
}
}
}
knit_folder("_R", "_posts", "figs/", "_caches/")
#knit_folder("_R/drafts", "_drafts", "figs/drafts/")
knit_folder("../_R", "../_posts", "../figs/", "../_caches/")
#!/usr/bin/Rscript --vanilla
# compiles all .Rmd files in _R directory into .md files in Pages directory,
# if the input file is older than the output file.
# run ./knitpages.R to update all knitr files that need to be updated.
KnitPost <- function(input, outfile, figsfolder, cachefolder, base.url="/") {
# this function is a modified version of an example here:
# http://jfisher-usgs.github.com/r/2012/07/03/knitr-jekyll/
require(knitr);
opts_knit$set(base.url = base.url)
fig.path <- paste0(figsfolder, sub(".Rmd$", "", basename(input)), "/")
cache.path <- file.path(cachefolder, sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(cache.path = cache.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, outfile, envir = parent.frame())
}
knit_folder <- function(infolder, outfolder, figsfolder, cachefolder) {
for (infile in list.files(infolder, pattern = "*.Rmd", full.names = TRUE)) {
pattern = "\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\\-"
print(infile)
# folder = ifelse(grepl(pattern, infile), outfolder, "pages")
outfile = paste0(outfolder, "/", sub(".Rmd$", ".md", basename(infile)))
print(outfile)
# knit only if the input file is the last one modified
if (!file.exists(outfile) |
file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(infile, outfile, figsfolder, cachefolder)
}
}
}
knit_folder("_R", "_posts", "figs/", "_caches/")
#knit_folder("_R/drafts", "_drafts", "figs/drafts/")
knit_folder("../_R", "../_posts", "../figs/", "../_caches/")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE)
# packages
library(tidyverse)
# theme
theme_set(theme_light())
movies <- read_csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/bechdel/movies.csv")
movies %>%
count(year, binary) %>%
ggplot(aes(year, n, fill = binary)) +
geom_col()
movies %>%
group_by(decade = 10 * (year %/% 10)) %>%
summarize(n_movies = n(),
pct_pass = mean(binary == "PASS")) %>%
ggplot(aes(decade, pct_pass)) +
geom_line() +
geom_point(aes(size = n_movies)) +
expand_limits(y = 0)
movies
movies <- movies %>%
mutate(across(contains("gross")), parse_number)
movies <- movies %>%
mutate(across(contains("gross"), parse_number))
movies %>%
filter(year >= 1990) %>%
arrange(desc(`intgross_2013$`)) %>%
select(title, budget, intgross, `intgross_2013$`, binary) %>%
head(25) %>%
mutate(title = fct_reorder(title, `intgross_2013$`)) %>%
ggplot(aes(`intgross_2013$`, title, fill = binary)) +
geom_col()
movies %>%
ggplot(aes(`intgross_2013$`, binary)) +
geom_boxplot()
movies %>%
ggplot(aes(`intgross_2013$`, binary)) +
geom_boxplot() +
scale_x_log10()
movies %>%
ggplot(aes(`intgross_2013$`, fill = binary)) +
geom_density(alpha = 0.5) +
scale_x_log10()
lm(log2(`intgross_2013$`) ~ binary, data = movies) %>%
summary()
lm(log2(`domgross_2013$`) ~ binary, data = movies) %>%
summary()
movies %>%
separate(genere, sep = ", ") %>%
count(genre, sort = TRUE)
View(movies)
movies <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-03-09/movies.csv')
movies
View(movies)
movies <- read_csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/bechdel/movies.csv")
movies %>%
count(clean_test)
movies %>%
count(clean_test) %>%
ggplot(n, clean_test) +
geom_col() +
facet_wrap(~ binary)
movies %>%
count(clean_test) %>%
ggplot(aes(n, clean_test)) +
geom_col() +
facet_wrap(~ binary)
movies %>%
count(clean_test) %>%
ggplot(aes(n, clean_test)) +
geom_col() +
facet_wrap(~binary)
movies %>%
count(clean_test) %>%
ggplot(aes(n, clean_test)) +
geom_col()
movies %>%
count(clean_test) %>%
ggplot(aes(n, clean_test)) +
geom_col() +
facet_wrap(~ binary)
movies %>%
count(clean_test, binary) %>%
ggplot(aes(n, clean_test)) +
geom_col() +
facet_wrap(~ binary)
movies %>%
count(clean_test, binary) %>%
ggplot(aes(n, clean_test)) +
geom_col() +
```
movies %>%
count(clean_test, binary)
movies %>%
count(clean_test, binary) %>%
ggplot(aes(n, clean_test)) +
geom_col(aes(fill = binary))
movies %>%
count(clean_test, binary) %>%
mutate(clean_test = fct_reorder(clean_test, n)) %>%
ggplot(aes(n, clean_test)) +
geom_col(aes(fill = binary))
