geom_density_ridges(alpha = .5) +
theme(legend.position = "none") +
labs(x = "volume in cubic meter",
y = "furniture category",
title = "How much volune does each item have?")
ikea_df %>%
add_count(category, name = "category_total") %>%
mutate(volume = depth*height*width, rm.na = TRUE,
category = glue::glue("{category} ({category_total})")) %>%
ggplot(aes(volume, price)) +
geom_point(alpha = 0.4) +
scale_y_log10(labels = scales::dollar_format()) +
expand_limits(y = 0) +
geom_smooth(method = "lm")
ikea_df %>%
add_count(category, name = "category_total") %>%
mutate(category = glue::glue("{category}({category_total})"),
category = fct_reorder(category, price),
volume = (depth*height*width)/10^6) %>%
ggplot(aes(volume, category, fill = category)) +
geom_density_ridges(alpha = .5) +
theme(legend.position = "none") +
labs(x = "volume in cubic meter",
y = "furniture category",
title = "How much volune does each item have?")
ikea_df %>%
add_count(category, name = "category_total") %>%
mutate(category = glue::glue("{category}({category_total})"),
category = fct_reorder(category, price),
volume = (depth*height*width)) %>%
ggplot(aes(volume, category, fill = category)) +
geom_density_ridges(alpha = .5) +
theme(legend.position = "none") +
labs(x = "volume in cubic meter",
y = "furniture category",
title = "How much volune does each item have?")
ikea_df %>%
add_count(category, name = "category_total") %>%
mutate(category = glue::glue("{category}({category_total})"),
category = fct_reorder(category, price),
volume = (depth*height*width)) %>%
ggplot(aes(volume, category, fill = category)) +
geom_density_ridges(alpha = .5) +
scale_x_log10() +
theme(legend.position = "none") +
labs(x = "volume in cubic meter",
y = "furniture category",
title = "How much volune does each item have?")
ikea_df %>%
add_count(category, name = "category_total") %>%
mutate(category = glue::glue("{category}({category_total})"),
category = fct_reorder(category, price),
volume = (depth*height*width)/10^5) %>%
ggplot(aes(volume, category, fill = category)) +
geom_density_ridges(alpha = .5) +
theme(legend.position = "none") +
labs(x = "volume in cubic meter",
y = "furniture category",
title = "How much volune does each item have?")
ikea_df %>%
add_count(category, name = "category_total") %>%
mutate(category = glue::glue("{category}({category_total})"),
category = fct_reorder(category, price),
volume = (depth*height*width)/10^56) %>%
ggplot(aes(volume, category, fill = category)) +
geom_density_ridges(alpha = .5) +
theme(legend.position = "none") +
labs(x = "volume in cubic meter",
y = "furniture category",
title = "How much volune does each item have?")
ikea_df %>%
add_count(category, name = "category_total") %>%
mutate(category = glue::glue("{category}({category_total})"),
category = fct_reorder(category, price),
volume = (depth*height*width)/10^6) %>%
ggplot(aes(volume, category, fill = category)) +
geom_density_ridges(alpha = .5) +
theme(legend.position = "none") +
labs(x = "volume in cubic meter",
y = "furniture category",
title = "How much volune does each item have?")
ikea_df %>%
add_count(category, name = "category_total") %>%
mutate(category = glue::glue("{category}({category_total})"),
category = fct_reorder(category, price),
volume = (depth*height*width)/10^6) %>%
ggplot(aes(volume, category, fill = category)) +
geom_density_ridges(alpha = .5) +
theme(legend.position = "none") +
geom_vline() +
labs(x = "volume in cubic meter",
y = "furniture category",
title = "How much volune does each item have?")
ikea_df %>%
add_count(category, name = "category_total") %>%
mutate(category = glue::glue("{category}({category_total})"),
category = fct_reorder(category, price),
volume = (depth*height*width)/10^6) %>%
ggplot(aes(volume, category, fill = category)) +
geom_density_ridges(alpha = .5) +
theme(legend.position = "none") +
geom_vline(xintercept = 1) +
labs(x = "volume in cubic meter",
y = "furniture category",
title = "How much volune does each item have?")
ikea_df %>%
add_count(category, name = "category_total") %>%
mutate(category = glue::glue("{category}({category_total})"),
category = fct_reorder(category, price),
volume = (depth*height*width)/10^6) %>%
ggplot(aes(volume, category, fill = category)) +
geom_density_ridges(alpha = .5) +
theme(legend.position = "none") +
geom_vline(xintercept = 1, colour = "red", lty = 2) +
labs(x = "volume in cubic meter",
y = "furniture category",
title = "How much volune does each item have?")
ikea_df %>%
add_count(category, name = "category_total") %>%
mutate(category = glue::glue("{category}({category_total})"),
category = fct_reorder(category, price),
volume = (depth*height*width)/10^6) %>%
ggplot(aes(volume, category, fill = category)) +
geom_density_ridges(alpha = .5) +
theme(legend.position = "none") +
geom_vline(xintercept = 1, colour = "red", lty = 2) +
labs(x = "volume in cubic meter",
y = "furniture category",
title = "How much volune does each item have?",
subtitle = "vertical red line represent 1 cuvic meter")
ikea_df %>%
add_count(category, name = "category_total") %>%
mutate(category = glue::glue("{category}({category_total})"),
category = fct_reorder(category, price),
volume = (depth*height*width)/10^6) %>%
ggplot(aes(volume, category, fill = category)) +
geom_density_ridges(alpha = .5) +
theme(legend.position = "none") +
geom_vline(xintercept = 1, colour = "red", lty = 2) +
labs(x = "volume in cubic meter",
y = "furniture category",
title = "How much volune does each item have?",
subtitle = "vertical red line represent 1 cubic meter")
ikea_df %>%
add_count(category, name = "category_total") %>%
mutate(category = glue::glue("{category}({category_total})"),
category = fct_reorder(category, price),
volume = (depth*height*width)/10^6) %>%
ggplot(aes(volume, category, fill = category)) +
geom_density_ridges(alpha = .5) +
theme(legend.position = "none") +
extend_limits(x = 0) +
geom_vline(xintercept = 1, colour = "red", lty = 2) +
labs(x = "volume in cubic meter",
y = "furniture category",
title = "How much volune does each item have?",
subtitle = "vertical red line represent 1 cubic meter")
ikea_df %>%
add_count(category, name = "category_total") %>%
mutate(category = glue::glue("{category}({category_total})"),
category = fct_reorder(category, price),
volume = (depth*height*width)/10^6) %>%
ggplot(aes(volume, category, fill = category)) +
geom_density_ridges(alpha = .5) +
theme(legend.position = "none") +
eexpand_limits(x = 0) +
geom_vline(xintercept = 1, colour = "red", lty = 2) +
labs(x = "volume in cubic meter",
y = "furniture category",
title = "How much volune does each item have?",
subtitle = "vertical red line represent 1 cubic meter")
ikea_df %>%
add_count(category, name = "category_total") %>%
mutate(category = glue::glue("{category}({category_total})"),
category = fct_reorder(category, price),
volume = (depth*height*width)/10^6) %>%
ggplot(aes(volume, category, fill = category)) +
geom_density_ridges(alpha = .5) +
theme(legend.position = "none") +
expand_limits(x = 0) +
geom_vline(xintercept = 1, colour = "red", lty = 2) +
labs(x = "volume in cubic meter",
y = "furniture category",
title = "How much volune does each item have?",
subtitle = "vertical red line represent 1 cubic meter")
ikea_df %>%
add_count(category, name = "category_total") %>%
mutate(category = glue::glue("{category}({category_total})"),
category = fct_reorder(category, price),
volume = (depth*height*width)/10^6) %>%
ggplot(aes(volume, category, fill = category)) +
geom_density_ridges(alpha = .5) +
theme(legend.position = "none") +
expand_limits(y = 0) +
geom_vline(xintercept = 1, colour = "red", lty = 2) +
labs(x = "volume in cubic meter",
y = "furniture category",
title = "How much volune does each item have?",
subtitle = "vertical red line represent 1 cubic meter")
ikea_df %>%
add_count(category, name = "category_total") %>%
mutate(category = glue::glue("{category}({category_total})"),
category = fct_reorder(category, price),
volume = (depth*height*width)/10^6) %>%
ggplot(aes(volume, category, fill = category)) +
geom_density_ridges(alpha = .5) +
theme(legend.position = "none") +
geom_vline(xintercept = 1, colour = "red", lty = 2) +
labs(x = "volume in cubic meter",
y = "furniture category",
title = "How much volune does each item have?",
subtitle = "vertical red line represent 1 cubic meter")
ikea_df %>%
select(X1, price, category) %>%
add_count(category, name = "category_total") %>%
mutate(category = glue::glue("{category} ({category_total})"),
category = fct_reorder(category, price)) %>%
ggplot(aes(category, price)) +
geom_boxplot(aes(fill = category), show.legend = FALSE) +
scale_y_log10(labels = scales::dollar_format()) +
coord_flip() +
labs(title = "Prices according to the famous category",
x = "",
y = "Price")
ikea_df <- ikea_df %>%
mutate(volume = (depth*height*width)/10^6)
ikea_df <- ikea_df %>%
mutate(volume = (depth*height*width)/10^6)
ikea_df %>%
select(volume)
ikea_df <- ikea_df %>%
mutate(volume = (depth*height*width)/10^6)
ikea_df %>%
select(volume, na.rm = TRUE)
ikea_df <- ikea_df %>%
mutate(volume = (depth*height*width)/10^6)
ikea_df %>%
select(volume) %>%
filter(na.rm = TRUE)
ikea_df <- ikea_df %>%
mutate(volume = (depth*height*width)/10^6, na.rm = TRUE)
ikea_df %>%
select(volume) %>%
filter(na.rm = TRUE)
ikea_df <- ikea_df %>%
mutate(volume = (depth*height*width)/10^6, rm.na = TRUE)
ikea_df %>%
select(volume) %>%
filter(na.rm = TRUE)
ikea_df <- ikea_df %>%
mutate(volume = (depth*height*width)/10^6)
ikea_df <- ikea_df %>%
select(-na.rm:rm.na)
ikea_df <- ikea_df %>%
mutate(volume = (depth*height*width)/10^6)
ikea_df <- ikea_df %>%
select(-na.rm, -rm.na)
ikea_df %>%
rm.na(volume)
ikea_df %>%
select(volume, rm.na())
ikea_df %>%
select(volume, rm.na)
ikea_df %>%
select(volume, rm.na = TRUE)
ikea_df %>%
select_if(volume, !rm.na = TRUE)
ikea_df %>%
select_if(volume, !is.na = TRUE)
ikea_df <- ikea_df %>%
mutate(volume = (depth*height*width)/10^6)
ikea_df %>%
select_if(volume, !is.na == TRUE)
ikea_df <- ikea_df %>%
mutate(volume = (depth*height*width)/10^6)
ikea_df %>%
select(volume, price)
ikea_df %>%
select(volume, price) %>%
lm(log(price)~log(volume))
ikea_df %>%
select(volume, price) %>%
lm(log(price)~log(volume)) %>%
summary()
ikea_df %>%
select(volume, price) %>%
lm(log(price)~log(volume), data =.) %>%
summary()
ikea_df %>%
select(volume, price) %>%
lm(log10(price)~log10(volume), data =.) %>%
summary()
ikea_df %>%
select(volume, price) %>%
lm(log2(price)~log2(volume), data =.) %>%
summary()
2^0.754
ikea_df %>%
select(volume, price) %>%
lm(log2(price)~log2(volume)+category, data =.) %>%
summary()
ikea_df %>%
select(volume, price, category) %>%
lm(log2(price)~log2(volume)+category, data =.) %>%
summary()
ikea_df %>%
select(volume, price) %>%
lm(log2(price)~log2(volume)+category, data =.) %>%
summary()
ikea_df %>%
select(volume, price) %>%
lm(log2(price)~log2(volume), data =.) %>%
summary()
140*80*105
1.4*0.8*1.05
10.191^2
1.14^2
2^10.191
2^10
2^1.14
2 ^ 0.75425
1.68 * 1.176
ikea_lm <- ikea_df %>%
select(volume, price) %>%
lm(log2(price)~log2(volume), data =.)
ikea_lm %>%
summary()
predict(ikea_lm, data.frame(lstat=(1.176)), interval = "prediction")
ikea_lm %>%
summary()
predict(ikea_lm, data.frame(lstat=(1.176, )), interval = "prediction")
predict(ikea_lm, data.frame(lstat=(1.176)), interval = "prediction")
predict(ikea_lm, lstat=(1.176), interval = "prediction")
predict(ikea_lm, 1.76, interval = "prediction")
predict(ikea_lm, list(1.76), interval = "prediction")
predict(ikea_lm, lstat=(1.176), interval = "prediction")
predict(ikea_lm, lstat=(1.176))
2^8.88
8^2
ikea_lm <- ikea_df %>%
select(volume, price, category) %>%
lm(log2(price)~log2(volume) + category, data =.)
ikea_lm %>%
summary()
ikea_lm %>%
summary()
ikea_lm <- ikea_df %>%
select(volume, price) %>%
lm(log2(price)~log2(volume) + category, data =.)
ikea_lm <- ikea_df %>%
select(volume, price, category) %>%
lm(log2(price)~log2(volume), data =.)
ikea_lm %>%
summary()
ikea_lm <- ikea_df %>%
select(volume, price, category) %>%
lm(log2(price)~log2(volume) + category, data =.)
ikea_lm %>%
summary()
predict(ikea_lm, lstat=(1.176))
ikea_lm <- ikea_df %>%
select(volume, price, category) %>%
lm(price~volume + category, data =.)
ikea_lm %>%
summary()
ikea_lm <- ikea_df %>%
select(volume, price, category) %>%
lm(price~volume, data =.)
ikea_lm %>%
summary()
ikea_lm <- ikea_df %>%
select(volume, price, category) %>%
lm(log2(price)~log2(volume), data =.)
ikea_lm %>%
summary()
ikea_lm <- ikea_df %>%
select(volume, price, category) %>%
lm(log2(price)~log2(volume) + category, data =.)
ikea_lm <- ikea_df %>%
select(volume, price, category) %>%
lm(log2(price)~log2(volume)+category, data =.)
ikea_lm %>%
summary()
2^9.7798315
2^0.003
ikea_lm <- ikea_df %>%
select(volume, price, category) %>%
mutate(category = fct_relevel(category, "Tables & desks")) %>%
lm(log2(price)~log2(volume)+category, data =.)
ikea_lm %>%
summary()
2^0.3
2^10
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE)
library(tidyverse)
theme_set(theme_light())
big_mac <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-12-22/big-mac.csv')
skimr::skim(big_mac)
View(big_mac)
big_mac %>%
add_count(name, name = "country_total") %>%
filter(country_total == max(country_total))
big_mac %>%
add_count(name, name = "country_total") %>%
filter(country_total == max(country_total)) %>%
view()
big_mac %>%
add_count(name, name = "country_total") %>%
filter(country_total == max(country_total)) %>%
ggplot(aes(date, local_price, colour = name)) +
geom_line()
big_mac %>%
add_count(name, name = "country_total") %>%
filter(country_total == max(country_total)) %>%
ggplot(aes(date, local_price, colour = name)) +
geom_line() +
facet_wrap(~ country)
big_mac %>%
add_count(name, name = "country_total") %>%
filter(country_total == max(country_total)) %>%
ggplot(aes(date, local_price, colour = name)) +
geom_line() +
facet_wrap(~name) +
theme(legend.position = "none")
big_mac %>%
add_count(name, name = "country_total") %>%
filter(country_total == max(country_total)) %>%
ggplot(aes(date, local_price, colour = name)) +
geom_line() +
facet_wrap(~name, scales = "free_y") +
theme(legend.position = "none")
?facet_wrap
big_mac %>%
add_count(name, name = "country_total") %>%
filter(country_total == max(country_total)) %>%
ggplot(aes(date, local_price, colour = name)) +
geom_line() +
expand_limits(y = 0) + # all graph start should be zero in facet_wrap
facet_wrap(~name, scales = "free_y") +
theme(legend.position = "none")
big_mac %>%
add_count(name, name = "country_total") %>%
filter(country_total == max(country_total)) %>%
ggplot(aes(date, local_price, colour = name)) +
geom_line() +
expand_limits(y = 0) + # all graph start should be zero in facet_wrap
facet_wrap(~name, scales = "free_y") +
labs(x = "date",
y = scales::dollar()) +
theme(legend.position = "none")
big_mac %>%
add_count(name, name = "country_total") %>%
filter(country_total == max(country_total)) %>%
ggplot(aes(date, local_price, colour = name)) +
geom_line() +
expand_limits(y = 0) + # all graph start should be zero in facet_wrap
facet_wrap(~name, scales = "free_y") +
labs(x = "date",
y = scales::dollar_format()) +
theme(legend.position = "none")
big_mac %>%
add_count(name, name = "country_total") %>%
filter(country_total == max(country_total)) %>%
ggplot(aes(date, local_price, colour = name)) +
geom_line() +
expand_limits(y = 0) + # all graph start should be zero in facet_wrap
facet_wrap(~name, scales = "free_y") +
labs(x = "Time",
y = "Prices in Local Currency") +
theme(legend.position = "none")
big_mac %>%
add_count(name, name = "country_total") %>%
filter(country_total == max(country_total)) %>%
mutate(name = fct_reorder(name, local_price,
function(.) max(.) /min(.)
)
)
ggplot(aes(date, local_price, colour = name)) +
geom_line() +
expand_limits(y = 0) + # all graph start should be zero in facet_wrap
facet_wrap(~name, scales = "free_y") +
labs(x = "Time",
y = "Prices in Local Currency") +
theme(legend.position = "none")
big_mac %>%
add_count(name, name = "country_total") %>%
filter(country_total == max(country_total)) %>%
mutate(name = fct_reorder(name, local_price,
function(.) max(.) /min(.)
)
) %>%
ggplot(aes(date, local_price, colour = name)) +
geom_line() +
expand_limits(y = 0) + # all graph start should be zero in facet_wrap
facet_wrap(~name, scales = "free_y") +
labs(x = "Time",
y = "Prices in Local Currency") +
theme(legend.position = "none")
big_mac %>%
add_count(name, name = "country_total") %>%
filter(country_total == max(country_total)) %>%
mutate(name = fct_reorder(name, local_price,
function(.) max(.) /min(.)
)
) %>% # rearrange according to change over time.
ggplot(aes(date, local_price, colour = name)) +
geom_line() +
expand_limits(y = 0) + # all graph start should be zero in facet_wrap
facet_wrap(~name, scales = "free_y") +
labs(x = "Time",
y = "Local Big Mac Prices") +
theme(legend.position = "none")
