I"»<p>An error shows up in red in your RStudio terminal. Here are some of the most common errors and how to fix them:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error: object 'foo' not found
</code></pre></div></div>

<p>(Where <code class="highlighter-rouge">foo</code> is any name). You tried to access a variable that doesnâ€™t exist. You might have</p>

<ul>
  <li>misspelled the variable name</li>
  <li>incorrectly capitalized the variable name (R is case sensitive!)</li>
  <li>forgotten to run the line that defines the variable in the first place, or
run into an error on that line.</li>
</ul>

<!-- end the list -->

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error: could not find function "foo"
</code></pre></div></div>

<p>(Where <code class="highlighter-rouge">foo</code> is any name). You tried to use a function (like <code class="highlighter-rouge">foo(bar)</code>) that doesnâ€™t exist. You might have:</p>

<ul>
  <li>misspelled the function name</li>
  <li>incorrectly capitalized the function name</li>
  <li>forgotten to load the library that provides this function. For example, before you use <code class="highlighter-rouge">as.data.table</code>, you have to load the <code class="highlighter-rouge">data.table</code> library with <code class="highlighter-rouge">library("data.table")</code>.</li>
  <li>accidentally put a variable name before an open parentheses, perhaps meaning to perform multiplication. For instance, writing <code class="highlighter-rouge">foo (bar + 1)</code> when you mean <code class="highlighter-rouge">foo * (bar + 1)</code>. R doesnâ€™t treat these parentheses as implicit multiplication: it attempts to find a function called <code class="highlighter-rouge">foo</code> (which doesnâ€™t exist).</li>
</ul>

<!-- end the list -->

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error: unexpected ')' in...
</code></pre></div></div>

<p>There is an extra end parenthesis in your line (itâ€™s easy to lose track of these once they start getting nested). Count and make sure that you have one close parenthesis for each open parenthesis. (The same goes for <code class="highlighter-rouge">unexpected ']'</code>, <code class="highlighter-rouge">unexpected '}'</code> and similar errors).</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error: unexpected symbol in...
</code></pre></div></div>

<p>The most common cause of this is forgetting a punctuation mark such as a comma: for example, <code class="highlighter-rouge">foo(bar1 bar2)</code> instead of <code class="highlighter-rouge">foo(bar1, bar2)</code>. <code class="highlighter-rouge">Error: unexpected numeric constant</code> is similar: it just means the value after the missing punctuation is a number (for example, <code class="highlighter-rouge">x 2</code> instead of <code class="highlighter-rouge">x = 2</code>).</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+
</code></pre></div></div>

<p>You might see a <code class="highlighter-rouge">+</code> sign in the interpreter after you hit return. This means the previous statement is unfinished: it might have an open parenthesis that never closes, an open <code class="highlighter-rouge">"</code> or <code class="highlighter-rouge">'</code> that is unmatched, or it could end with an operator like <code class="highlighter-rouge">+</code> or <code class="highlighter-rouge">-</code> that expects the line to continue afterwards. Hit the <code class="highlighter-rouge">esc</code> key to cancel this line, then find the problem with your previous line (count parentheses, and check your quotes) and fix it.</p>
:ET